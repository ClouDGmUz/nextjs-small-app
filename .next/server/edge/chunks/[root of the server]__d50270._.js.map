{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  // Check if the request is for an admin route\n  if (request.nextUrl.pathname.startsWith('/admin')) {\n    // Skip authentication for the login page\n    if (request.nextUrl.pathname === '/admin/login') {\n      return NextResponse.next();\n    }\n\n    // Check for admin token in cookies\n    const token = request.cookies.get('admin_token');\n\n    // If no token is present, redirect to login page\n    if (!token) {\n      const loginUrl = new URL('/admin/login', request.url);\n      return NextResponse.redirect(loginUrl);\n    }\n\n    // Allow the request to proceed if token exists\n    return NextResponse.next();\n  }\n\n  // For non-admin routes, allow the request to proceed\n  return NextResponse.next();\n}\n\n// Configure the middleware to run only on admin routes\nexport const config = {\n  matcher: '/admin/:path*'\n};"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGO,SAAS,WAAW,OAAoB;IAC7C,6CAA6C;IAC7C,IAAI,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW;QACjD,yCAAyC;QACzC,IAAI,QAAQ,OAAO,CAAC,QAAQ,KAAK,gBAAgB;YAC/C,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;QAC1B;QAEA,mCAAmC;QACnC,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC;QAElC,iDAAiD;QACjD,IAAI,CAAC,OAAO;YACV,MAAM,WAAW,IAAI,IAAI,gBAAgB,QAAQ,GAAG;YACpD,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,+CAA+C;QAC/C,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,qDAAqD;IACrD,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;AACX"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}