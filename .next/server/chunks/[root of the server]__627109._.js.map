{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/app/api/agents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { Agent } from \"@/lib/types\";\r\n\r\n// GET /api/agents - List all agents\r\nexport async function GET() {\r\n  try {\r\n    const agents = await prisma.agent.findMany({\r\n      orderBy: { createdAt: 'desc' }\r\n    });\r\n    return NextResponse.json(agents);\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch agents\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST /api/agents - Create a new agent\r\nexport async function POST(\r\n  request: NextRequest\r\n) {\r\n  try {\r\n    const body = await request.json() as Omit<Agent, 'id' | 'createdAt' | 'updatedAt'>;\r\n    const newAgent = await prisma.agent.create({\r\n      data: {\r\n        name: body.name,\r\n        phoneNumber: body.phoneNumber,\r\n        location: body.location,\r\n        status: body.status || \"active\",\r\n        telegram: body.telegram || null,\r\n      }\r\n    });\r\n    return NextResponse.json(newAgent, { status: 201 });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Invalid request body\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT /api/agents - Update an agent\r\nexport async function PUT(\r\n  request: NextRequest\r\n) {\r\n  try {\r\n    const body = await request.json() as Agent;\r\n    \r\n    if (!body.id) {\r\n      return NextResponse.json(\r\n        { error: \"Agent ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const updatedAgent = await prisma.agent.update({\r\n      where: { id: body.id },\r\n      data: {\r\n        name: body.name,\r\n        phoneNumber: body.phoneNumber,\r\n        location: body.location,\r\n        status: body.status,\r\n        telegram: body.telegram || null,\r\n        order: body.order,\r\n      }\r\n    });\r\n\r\n    return NextResponse.json(updatedAgent);\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Failed to update agent\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE /api/agents?id={id} - Delete an agent\r\nexport async function DELETE(\r\n  request: NextRequest\r\n) {\r\n  const { searchParams } = new URL(request.url);\r\n  const id = searchParams.get(\"id\");\r\n\r\n  if (!id) {\r\n    return NextResponse.json(\r\n      { error: \"Agent ID is required\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    await prisma.agent.delete({\r\n      where: { id }\r\n    });\r\n    return NextResponse.json({ message: \"Agent deleted successfully\" });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Failed to delete agent\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAIO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,SAAS;gBAAE,WAAW;YAAO;QAC/B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KACpB,OAAoB;IAEpB,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACzC,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,aAAa,KAAK,WAAW;gBAC7B,UAAU,KAAK,QAAQ;gBACvB,QAAQ,KAAK,MAAM,IAAI;gBACvB,UAAU,KAAK,QAAQ,IAAI;YAC7B;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IACpB,OAAoB;IAEpB,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YAC7C,OAAO;gBAAE,IAAI,KAAK,EAAE;YAAC;YACrB,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,aAAa,KAAK,WAAW;gBAC7B,UAAU,KAAK,QAAQ;gBACvB,QAAQ,KAAK,MAAM;gBACnB,UAAU,KAAK,QAAQ,IAAI;gBAC3B,OAAO,KAAK,KAAK;YACnB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,OACpB,OAAoB;IAEpB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;IAE5B,IAAI,CAAC,IAAI;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,sHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACxB,OAAO;gBAAE;YAAG;QACd;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6B;IACnE,EAAE,OAAM;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}