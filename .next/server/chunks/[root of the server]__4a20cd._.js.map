{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/app/api/admin/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\n// POST /api/admin/login - Authenticate admin\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Validate required fields\n    if (!body.email || !body.password) {\n      return NextResponse.json(\n        { error: \"Email and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Find admin by email\n    const admin = await prisma.admin.findUnique({\n      where: { email: body.email }\n    });\n\n    if (!admin) {\n      return NextResponse.json(\n        { error: \"Invalid credentials\" },\n        { status: 401 }\n      );\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(body.password, admin.password);\n\n    if (!isValidPassword) {\n      return NextResponse.json(\n        { error: \"Invalid credentials\" },\n        { status: 401 }\n      );\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { id: admin.id, email: admin.email },\n      process.env.JWT_SECRET || 'your-secret-key',\n      { expiresIn: '1d' }\n    );\n\n    // Set JWT token in HTTP-only cookie\n    const response = NextResponse.json(\n      { message: \"Login successful\" },\n      { status: 200 }\n    );\n\n    response.cookies.set({\n      name: 'admin_token',\n      value: token,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 // 1 day\n    });\n\n    return response;\n  } catch (error) {\n    console.error('Error during login:', error);\n    return NextResponse.json(\n      { error: \"An error occurred during login\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,2BAA2B;QAC3B,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,QAAQ,EAAE;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,QAAQ,MAAM,sHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YAC1C,OAAO;gBAAE,OAAO,KAAK,KAAK;YAAC;QAC7B;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,KAAK,QAAQ,EAAE,MAAM,QAAQ;QAE1E,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,IAAI,MAAM,EAAE;YAAE,OAAO,MAAM,KAAK;QAAC,GACnC,QAAQ,GAAG,CAAC,UAAU,IAAI,mBAC1B;YAAE,WAAW;QAAK;QAGpB,oCAAoC;QACpC,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAChC;YAAE,SAAS;QAAmB,GAC9B;YAAE,QAAQ;QAAI;QAGhB,SAAS,OAAO,CAAC,GAAG,CAAC;YACnB,MAAM;YACN,OAAO;YACP,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,KAAK,KAAK,GAAG,QAAQ;QAC/B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}