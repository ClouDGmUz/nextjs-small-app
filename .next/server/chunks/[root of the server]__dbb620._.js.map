{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file://D%3A/dev/Node/NextJS/webapp/src/app/api/pre-orders/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function PATCH(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await context.params;\n    const body = await request.json();\n    const { status, notes } = body;\n\n    if (!status && !notes) {\n      return NextResponse.json(\n        { error: \"Status or notes are required\" },\n        { status: 400 }\n      );\n    }\n\n    const preOrder = await prisma.preOrder.update({\n      where: { id },\n      data: {\n        ...(status && { status }),\n        ...(notes && { notes })\n      },\n    });\n\n    return NextResponse.json(preOrder);\n  } catch (error) {\n    return NextResponse.json(\n      { error: \"Failed to update pre-order\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,MACpB,OAAoB,EACpB,OAA4C;IAE5C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,MAAM;QACnC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;QAE1B,IAAI,CAAC,UAAU,CAAC,OAAO;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,GAAI,UAAU;oBAAE;gBAAO,CAAC;gBACxB,GAAI,SAAS;oBAAE;gBAAM,CAAC;YACxB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}